name: TEST

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: environment
        options: 
        - dev
        - appstore
      message:
        required: true

jobs:
  greet:
    runs-on: self-hosted

    steps:
    - name: CHECK INPUT CHOICE
      run: echo "${{ github.event.inputs.environment }}
    - name: CHECK INPUT MESSAGE
      run: echo "${{ github.event.inputs.message }}
      
# # This is a basic workflow to help you get started with Actions
# name: DEV DISTRIBUTION

# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the main branch
# #   push:
# #     branches:
# #       - 'test-release/**'
# #       - 'dev-release/**'
    
#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     # runs-on: ubuntu-latest
#     runs-on: macos-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # LOGGING GITHUB ALL CONTEXT FOR DEVELOP ACTION
# #       - name: Check all github context
# #         env:
# #           GITHUB_CONTEXT: ${{ toJson(github) }}
# #         run: echo "$GITHUB_CONTEXT"
        
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - name: Checkout
#         uses: actions/checkout@v2

# #       # Download latest provisioning file
# #       - name: Download Provisioning Profiles
# #         id: provisioning
# #         uses: apple-actions/download-provisioning-profiles@v1
# #         with: 
# #           bundle-id: 'com.example.App'
# #           profile-type: 'IOS_APP_STORE'
# #           issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
# #           api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
# #           api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
  
# #       - name: Another example step
# #         run: echo ${{ steps.provisioning.outputs.profiles }}
      
#       - name: ls
#         run: ls
        
#       #- name: Select Xcode
#       #  run: sudo xcode-select -switch /Applications/Xcode_11.4.1.app
      
#       - name: Xcode version
#         run: /usr/bin/xcodebuild -version
        
#       - name: Pod install
#         run: pod install
    
#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#           P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#           KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#         run: |
#           # create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH

#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
#       - name: Clean workspace with scheme
#         run: xcodebuild clean -workspace bean.xcworkspace -scheme bean
        
#       - name: Build workspace with scheme
#         run: xcodebuild build -workspace bean.xcworkspace -scheme bean
        
#       - name: Archive workspace
#         run: xcodebuild archive -workspace bean.xcworkspace -scheme bean -archivePath ~/result/bean.xcarchive
        
#       - name: Create an ipa
#         run: xcodebuild -exportArchive -archivePath ~/result/bean.xcarchive -exportPath ~/result -exportOptionsPlist ~/result/ExportOptions.plist
        
#       - name: ls
#         run: ls result
        
# #       - name: Upload ipa to Firebase App Distribution
# #         uses: wzieba/Firebase-Distribution-Github-Action@v1
# #         with:
# #           appId: ${{secrets.FIREBASE_APP_ID}}
# #           token: ${{secrets.FIREBASE_TOKEN}}
# #           file: result/bean.ipa
